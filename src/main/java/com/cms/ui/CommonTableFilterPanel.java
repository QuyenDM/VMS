package com.cms.ui;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;
import com.cms.component.CustomPageTableFilter;
import com.cms.utils.BundleUtils;

public class CommonTableFilterPanel extends CustomComponent {

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
    @AutoGenerated
    private VerticalLayout mainLayout;
    @AutoGenerated
    private VerticalLayout verTBLListGoodInfomation;
//    toolbar table
    private HorizontalLayout toolbar;
    @AutoGenerated
    private CustomPageTableFilter<IndexedContainer> mainTable;
    @AutoGenerated
    private GridLayout gridTBLInfomation;
    @AutoGenerated
    private Label txtTotalWeightService;
    @AutoGenerated
    private Label lbTotalWeight;

    Button addButton;
    Button coppyButton;
    Button deleteButton;
    Button editButton;
    Button importButton;
    Button exportButton;
    Button configButton;
    Button delContraintButton;

    HorizontalLayout horizoltalLayout;
    Button btnAdd;
    Button btnSave;
    Button btnDelelete;

    /**
     * The constructor should first build the main layout, set the composition
     * root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the visual
     * editor.
     */
    public CommonTableFilterPanel() {
        buildMainLayout();
        setCompositionRoot(mainLayout);

        // TODO add user code here
    }

    public VerticalLayout getMainLayout() {
        return mainLayout;
    }

    @AutoGenerated
    private VerticalLayout buildMainLayout() {
        // common part: create layout
        mainLayout = new VerticalLayout();
        mainLayout.setImmediate(false);
        mainLayout.setWidth("100%");
        mainLayout.setHeight("-1px");
        mainLayout.setMargin(false);

        // top-level component properties
        setWidth("100.0%");
        setHeight("-1px");

        // verTBLListGoodInfomation
        verTBLListGoodInfomation = buildVerTBLListGoodInfomation();
        mainLayout.addComponent(verTBLListGoodInfomation);

        return mainLayout;
    }

    @AutoGenerated
    private VerticalLayout buildVerTBLListGoodInfomation() {
        // common part: create layout
        verTBLListGoodInfomation = new VerticalLayout();
        verTBLListGoodInfomation.setStyleName("custom-feildset");
        verTBLListGoodInfomation.setImmediate(false);
        verTBLListGoodInfomation.setWidth("100.0%");
        verTBLListGoodInfomation.setHeight("-1px");
        verTBLListGoodInfomation.setMargin(true);

        // gridTBLInfomation
        gridTBLInfomation = buildGridTBLInfomation();
        verTBLListGoodInfomation.addComponent(gridTBLInfomation);
//      toolbar
        toolbar = builHorizontalToolBar();
        verTBLListGoodInfomation.addComponent(toolbar);
        verTBLListGoodInfomation.setComponentAlignment(toolbar, Alignment.TOP_RIGHT);

        // mainTable
        mainTable = new CustomPageTableFilter<>();
        mainTable.setImmediate(true);
        mainTable.setWidth("100.0%");
        mainTable.setHeight("-1px");
        mainTable.setStyleName("table-noscroll");
        verTBLListGoodInfomation.addComponent(mainTable);

        horizoltalLayout = new HorizontalLayout();
        horizoltalLayout.setWidth("-1px");
        btnAdd = new Button(BundleUtils.getString("common.button.add"));
        btnSave = new Button(BundleUtils.getString("common.button.save"));
        btnDelelete = new Button(BundleUtils.getString("common.button.delete"));
        btnAdd.setVisible(false);
        btnSave.setVisible(false);
        btnDelelete.setVisible(false);
        horizoltalLayout.setVisible(false);
        horizoltalLayout.addComponent(btnAdd);
        horizoltalLayout.addComponent(btnSave);
        horizoltalLayout.addComponent(btnDelelete);
        verTBLListGoodInfomation.addComponent(horizoltalLayout);

        return verTBLListGoodInfomation;
    }

    @AutoGenerated
    private GridLayout buildGridTBLInfomation() {
        // common part: create layout
        gridTBLInfomation = new GridLayout();
        gridTBLInfomation.setImmediate(true);
        gridTBLInfomation.setWidth("100.0%");
        gridTBLInfomation.setHeight("-1px");
        gridTBLInfomation.setMargin(false);
        gridTBLInfomation.setVisible(false);
        gridTBLInfomation.setColumns(20);
        gridTBLInfomation.setRows(1);
        // lbTotalWeight
        lbTotalWeight = new Label();
        lbTotalWeight.setImmediate(false);
        lbTotalWeight.setWidth("-1px");
        lbTotalWeight.setHeight("-1px");
        lbTotalWeight.setValue("Tá»•ng: ");
        lbTotalWeight.setStyleName("v-label-red");
        lbTotalWeight.setVisible(true);
        gridTBLInfomation.addComponent(lbTotalWeight, 18, 0);

        // txtTotalWeightService
        txtTotalWeightService = new Label();
        txtTotalWeightService.setImmediate(false);
        txtTotalWeightService.setWidth("-1px");
        txtTotalWeightService.setHeight("-1px");
        txtTotalWeightService.setValue("");
        txtTotalWeightService.setStyleName("v-label-red");
        txtTotalWeightService.setVisible(true);
        gridTBLInfomation.addComponent(txtTotalWeightService, 19, 0);
        return gridTBLInfomation;
    }

    private HorizontalLayout builHorizontalToolBar() {
        toolbar = new HorizontalLayout();
        toolbar.setImmediate(true);
        toolbar.setMargin(false);
        toolbar.setWidth("-1px");
        toolbar.setHeight("30px");
        toolbar.setSpacing(true);
        toolbar.setVisible(true);
        toolbar.addStyleName("v-spacing-toolbar");
        //Button import =NgocND6 Modifier
        importButton = new Button();
        importButton.setImmediate(true);
        importButton.setIcon(new ThemeResource("img/import_excel.png"));
        importButton.setWidth("-1px");
        importButton.setHeight("-1px");
        importButton.setStyleName("v-button-link");
        importButton.setVisible(false);
        importButton.setDisableOnClick(true);
        importButton.setDescription(BundleUtils.getString("common.button.importFile"));
        toolbar.addComponent(importButton);
        //Button export
        exportButton = new Button();
        exportButton.setImmediate(true);
        exportButton.setIcon(new ThemeResource("img/export_excel.png"));
        exportButton.setWidth("-1px");
        exportButton.setHeight("-1px");
        exportButton.setStyleName("v-button-link");
        exportButton.setVisible(false);
//        exportButton.setDisableOnClick(true);
        exportButton.setDescription(BundleUtils.getString("common.button.exportFile"));
        toolbar.addComponent(exportButton);

        //QuyenDM configButton
        configButton = new Button(new ThemeResource("img/config_button.png"));
        configButton.setWidth("-1px");
        configButton.setHeight("-1px");
        configButton.setStyleName("v-button-link");
        configButton.setVisible(false);
        configButton.setDescription(BundleUtils.getString("common.button.config"));
        toolbar.addComponent(configButton);

        //        button add;
        addButton = new Button();
        addButton.setIcon(new ThemeResource("img/add-icon.png"));
        addButton.setWidth("-1px");
        addButton.setHeight("-1px");
        addButton.setStyleName("v-button-link");
        addButton.setDisableOnClick(true);
        addButton.setDescription(BundleUtils.getString("common.button.add"));
        toolbar.addComponent(addButton);

        coppyButton = new Button();
        coppyButton.setIcon(new ThemeResource("img/copy.png"));
        coppyButton.setWidth("-1px");
        coppyButton.setHeight("-1px");
        coppyButton.setStyleName("v-button-link");
        coppyButton.setDisableOnClick(true);
        coppyButton.setDescription(BundleUtils.getString("common.button.copy"));
        toolbar.addComponent(coppyButton);

        editButton = new Button();
        editButton.setIcon(new ThemeResource("img/edit-icon.png"));
        editButton.setWidth("-1px");
        editButton.setHeight("-1px");
        editButton.setStyleName("v-button-link");
        editButton.setDisableOnClick(true);
        editButton.setDescription(BundleUtils.getString("common.button.edit"));
        toolbar.addComponent(editButton);

        //Hungkv del contraint
        delContraintButton = new Button();
        delContraintButton.setIcon(new ThemeResource("img/icondelete.png"));
        delContraintButton.setWidth("-1px");
        delContraintButton.setHeight("-1px");
        delContraintButton.setStyleName("v-button-link");
        delContraintButton.setVisible(false);
        delContraintButton.setDescription(BundleUtils.getString("common.button.delete"));
        toolbar.addComponent(delContraintButton);

        deleteButton = new Button();
        deleteButton.setIcon(new ThemeResource("img/icondelete.png"));
        deleteButton.setWidth("-1px");
        deleteButton.setHeight("-1px");
        deleteButton.setStyleName("v-button-link");
        deleteButton.setDisableOnClick(true);
        deleteButton.setDescription(BundleUtils.getString("common.button.delete"));
        toolbar.addComponent(deleteButton);
        return toolbar;
    }

    public void setMainLayout(VerticalLayout mainLayout) {
        this.mainLayout = mainLayout;
    }

    public VerticalLayout getVerTBLListGoodInfomation() {
        return verTBLListGoodInfomation;
    }

    public void setVerTBLListGoodInfomation(VerticalLayout verTBLListGoodInfomation) {
        this.verTBLListGoodInfomation = verTBLListGoodInfomation;
    }

    public GridLayout getGridTBLInfomation() {
        return gridTBLInfomation;
    }

    public void setGridTBLInfomation(GridLayout gridTBLInfomation) {
        this.gridTBLInfomation = gridTBLInfomation;
    }

    public Label getTxtTotalWeightService() {
        return txtTotalWeightService;
    }

    public void setTxtTotalWeightService(Label txtTotalWeightService) {
        this.txtTotalWeightService = txtTotalWeightService;
    }

    public Label getLbTotalWeight() {
        return lbTotalWeight;
    }

    public void setLbTotalWeight(Label lbTotalWeight) {
        this.lbTotalWeight = lbTotalWeight;
    }

    public HorizontalLayout getHorizoltalLayout() {
        return horizoltalLayout;
    }

    public void setHorizoltalLayout(HorizontalLayout horizoltalLayout) {
        this.horizoltalLayout = horizoltalLayout;
    }

    public Button getBtnAdd() {
        return btnAdd;
    }

    public void setBtnAdd(Button btnAdd) {
        this.btnAdd = btnAdd;
    }

    public Button getBtnSave() {
        return btnSave;
    }

    public void setBtnSave(Button btnSave) {
        this.btnSave = btnSave;
    }

    public Button getBtnDelelete() {
        return btnDelelete;
    }

    public void setBtnDelelete(Button btnDelelete) {
        this.btnDelelete = btnDelelete;
    }

    public CustomPageTableFilter<IndexedContainer> getMainTable() {
        return mainTable;
    }

    public void setMainTable(CustomPageTableFilter<IndexedContainer> mainTable) {
        this.mainTable = mainTable;
    }

    public HorizontalLayout getToolbar() {
        return toolbar;
    }

    public void setToolbar(HorizontalLayout toolbar) {
        this.toolbar = toolbar;
    }

    public Button getAddButton() {
        return addButton;
    }

    public void setAddButton(Button addButton) {
        this.addButton = addButton;
    }

    public Button getCoppyButton() {
        return coppyButton;
    }

    public void setCoppyButton(Button coppyButton) {
        this.coppyButton = coppyButton;
    }

    public Button getDeleteButton() {
        return deleteButton;
    }

    public void setDeleteButton(Button deleteButton) {
        this.deleteButton = deleteButton;
    }

    public Button getEditButton() {
        return editButton;
    }

    public void setEditButton(Button editButton) {
        this.editButton = editButton;
    }

    public Button getImportButton() {
        return importButton;
    }

    public void setImportButton(Button importButton) {
        this.importButton = importButton;
    }

    public Button getExportButton() {
        return exportButton;
    }

    public void setExportButton(Button exportButton) {
        this.exportButton = exportButton;
    }

    public Button getConfigButton() {
        return configButton;
    }

    public void setConfigButton(Button configButton) {
        this.configButton = configButton;
    }

    public Button getDelContraintButton() {
        return delContraintButton;
    }

    public void setDelContraintButton(Button delContraintButton) {
        this.delContraintButton = delContraintButton;
    }
}
