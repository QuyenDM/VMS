package com.cms.component;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.FontAwesome;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.VerticalLayout;
import com.cms.utils.BundleUtils;
import com.cms.utils.Constants;
import java.util.ArrayList;
import java.util.List;

public class GridManyButton extends CustomComponent {

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
    @AutoGenerated
    private VerticalLayout mainLayout;
    @AutoGenerated
    private GridLayout gridButton;
    @AutoGenerated
    private List<Button> listBtnCommon;

    /**
     * The constructor should first build the main layout, set the composition
     * root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the visual
     * editor.
     *
     * @param commonBtn
     */
    public GridManyButton(String[] commonBtn) {
        buildMainLayout(commonBtn, false);
        setCompositionRoot(mainLayout);

        // TODO add user code here
    }

    public GridManyButton(String[] commonBtn, Boolean isHorizontal) {
        buildMainLayout(commonBtn, isHorizontal);
        setCompositionRoot(mainLayout);

        // TODO add user code here
    }

    @AutoGenerated
    private VerticalLayout buildMainLayout(String[] commonBtn, Boolean isHorizontal) {
        // common part: create layout
        mainLayout = new VerticalLayout();
        mainLayout.setImmediate(true);
        mainLayout.setWidth("100%");
        mainLayout.setHeight("-1px");
//        mainLayout.setMargin(true);

        // top-level component properties
        setWidth("100.0%");
        setHeight("-1px");

        // gridButton
        gridButton = buildGridButton(commonBtn, isHorizontal);
        mainLayout.addComponent(gridButton);
        mainLayout.setComponentAlignment(gridButton, Alignment.MIDDLE_CENTER);

        return mainLayout;
    }

    @AutoGenerated
    private GridLayout buildGridButton(String[] commonBtn, Boolean isHorizontal) {
        // common part: create layout
        if (isHorizontal) {
            gridButton = new GridLayout(1, commonBtn.length);
        } else {
            gridButton = new GridLayout(commonBtn.length, 1);
        }
        gridButton.setImmediate(true);
        gridButton.setWidth("-1px");
        gridButton.setHeight("-1px");
        gridButton.setMargin(true);
        gridButton.setSpacing(true);
        Button btnCommon;
        listBtnCommon = new ArrayList<>();
        // btnSearch
        for (int i = 0; i < commonBtn.length; i++) {
            btnCommon = new Button();
            btnCommon.setDisableOnClick(true);
            btnCommon.setCaption(commonBtn[i]);
            if (commonBtn[i].equals(Constants.BUTTON_ADD)) {
                btnCommon.setIcon(new ThemeResource(Constants.ICON.ADD));
//                btnCommon.setIcon(FontAwesome.PLUS);
            } else if (commonBtn[i].equals(Constants.BUTTON_UPDATE)) {
                btnCommon.setIcon(new ThemeResource(Constants.ICON.UPDATE));
//                btnCommon.setIcon(FontAwesome.PENCIL);
            } else if (commonBtn[i].equals(Constants.BUTTON_SEARCH)) {
                btnCommon.setIcon(new ThemeResource(Constants.ICON.SEARCH));
//                btnCommon.setIcon(FontAwesome.SEARCH);
            } else if (commonBtn[i].equals(Constants.BUTTON_DELETE)) {
//                btnCommon.setIcon(FontAwesome.TRASH_O);
                btnCommon.setIcon(new ThemeResource(Constants.ICON.DELETE));
            } else if (commonBtn[i].equals(Constants.BUTTON_CANCEL)) {
                btnCommon.setIcon(new ThemeResource(Constants.ICON.CANCEL));
//                btnCommon.setIcon(FontAwesome.TIMES);
//                btnCommon.addStyleName("danger");
            } else if (commonBtn[i].equals(Constants.BUTTON_SAVE)) {
                btnCommon.setIcon(new ThemeResource(Constants.ICON.SAVE));
//                btnCommon.setIcon(FontAwesome.SAVE);
            } else if (commonBtn[i].equals(Constants.BUTTON_COPY)) {
                btnCommon.setIcon(new ThemeResource(Constants.ICON.COPY));
//                btnCommon.setIcon(FontAwesome.COPY);
            } else if (commonBtn[i].equals(Constants.BUTTON_DETAIL)) {
                btnCommon.setIcon(new ThemeResource(Constants.ICON.DETAIL));
//                btnCommon.setIcon(FontAwesome.EYE);
            } else if (commonBtn[i].equals(Constants.BUTTON_EDIT)) {
                btnCommon.setIcon(new ThemeResource(Constants.ICON.EDIT));
//                btnCommon.setIcon(FontAwesome.PENCIL);
            } else if (commonBtn[i].equals(Constants.BUTTON_EXIT)) {
                btnCommon.setIcon(new ThemeResource(Constants.ICON.EXIT));
//                btnCommon.setIcon(FontAwesome.TIMES);
            } else if (commonBtn[i].equals(Constants.BUTTON_REFRESH)) {
                btnCommon.setIcon(new ThemeResource(Constants.ICON.RESET));
//                btnCommon.setIcon(FontAwesome.REFRESH);
            } else if (commonBtn[i].equals(Constants.BUTTON_UPLOAD)) {
                btnCommon.setIcon(FontAwesome.UPLOAD);
            } else if (commonBtn[i].equals(Constants.BUTTON_EXPORT)) {
                btnCommon.setIcon(new ThemeResource(Constants.ICON.EXPORT_EXCEL));
            }
            btnCommon.setImmediate(true);
            btnCommon.setWidth("-1px");
            btnCommon.setHeight("-1px");
            listBtnCommon.add(btnCommon);
            if (isHorizontal) {
                gridButton.addComponent(btnCommon, 0, i);
            } else {
                gridButton.addComponent(btnCommon, i, 0);
            }
        }
        return gridButton;
    }

    public List<Button> getBtnCommon() {
        return listBtnCommon;
    }

    public void setBtnCommon(List<Button> btnCommon) {
        this.listBtnCommon = btnCommon;
    }
}
